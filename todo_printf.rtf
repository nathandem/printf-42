{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww16540\viewh27080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 Next:\

\b0 - do the Makefile\
- handle float\
- move realloc helpers and the fc in `utils` to libft\
- adjust to the Norme & check filenames+header alignement\
\
\
\
Note:\
- passing arguments by reference is a smarter to spare a return of a function (that includes `i` counters)\
\
- structuring `ft_printf` is an option if not enough room in ft_printf to hold everything:\

\i int				ft_printf(const char *format, ...)\
\{\
	va_list	args;\
	int		ret;\
\
	va_start(args, format);\
	ret = ft_inner_printf(format, &args, 0);\
	va_end(args);\
	return (ret);\
\}\

\i0 \
Gestion du pointer:\
https://github.com/malikfassi/42/blob/master/ALGO/PRINTF/ft_printf_hex.c\
\
Pour la gestion du %%:\
- dans le bloc conditionnel dans lequel on entre apres avoir rentr\'e9 un %, avancer de un, si le charactere sur place est un %, l'afficher et continuer\
\
\
\
Peut-etre partir des sizes, plutt que des conversions pour construire les fonctions de gestion des conversions.\
\
Idee: pour faire en sorte que le traitements des flags (sauf #, ` `, + et precision) et de la min width field soit possible de maniere generique, faire en sorte que les conversions retournent des chaines de characteres.\
\
\
Ressource for utf-8 (very last step, if done one day):\
https://github.com/nmei-42/42-printf/blob/master/printf_utf_utils.c\
\
\
\
Points techniques\
\
1) nombre d'args non definis/connus \'e0 l'avance => 
\b fonction variadique (stdarg)
\b0 \
https://fr.wikipedia.org/wiki/Fonction_variadique\
https://en.wikipedia.org/wiki/Stdarg.h\
\
2) plein de formats et d'operations\
=> parser et handlers\
\
3) gros dispatcher, bonne structure\
- Pour faire le dispatcher, utiliser une grosse structure, contenant des pointeurs sur fonctions comme dans l'exo de piscine d10/ex09 (ex06 dans mon cas) & looper sur ce tableau\
\
3 et 4)\
=> tableau de structures\
Du genre:\
\
typedef struct	s_flags\
\{\
	char *flag;\
	<signature of the function> // 
\i sth in void* to fit every possibilities?
\i0 \
\}			t_flags;\
\
Note:\
- declaration d'un pointeur sur fonction, depend bcp du nb + types des parametres et du type de sortie\
void	(*fc_ptr)(type1, type2);\
- assignation\
fc_ptr = &function_name;\
- utilisation\
*fc_ptr(arg1, arg2);\
\
\
\
Note sur stdarg:\
Promotion/conversion/cast de types:\
char -> int (4 bytes)\
short (2 bytes) -> int\
float (4 bytes) -> double (8 bytes)\
\pard\pardeftab720\sl300\partightenfactor0
\cf0 \
src: https://www.geeksforgeeks.org/data-types-in-c/\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\

\b Compilation steps for printf_test file\

\b0 - Compile libftprintf.a\
1) prepare the object files making the lib (no need for a the -L and -l because it's not a main, just a lib)\
clang -Wall -Wextra -Werror -I src/libft -I src -o src/ft_printf.o -c src/ft_printf.c\
2) link the object files into a lib\
ar -rc src/libftprintf.a src/ft_printf.o\
\
- Use the library with the file\
clang -Wall -Wextra -Werror -I src/libft -I src -Lsrc/libft -lft  -Lsrc -lftprintf -o tests/basic_test tests/basic_test.c\
(we can optionally turn the c test file into an object before using it for compilation)\
\
\
\

\b Compilation command for the directive_parser
\b0 \
clang -I ../src/libft -I ../src -L../src/libft -lft ../src/directive_parsers.c test_helpers.c  directive_parser_test.c && ./a.out\
\
\
\
\
La string qui contient les % est appell\'e9e "format string". Elle contient des characteres normaux copi\'e9s normalement vers la sortie, des directives qui utilisent un ou plusieurs des arguments qui suivent cette string.\
Le type du/des arguments fourni doit correspondre \'e0 ce que la fonction de conversion attend (
\i after type promotion?
\i0 ).\
\
\
Attention \'e0 la gestion de l'unicode. Optionnel\
\
\

\i Les caracteres speciaux sont g\'e9r\'e9s par write :)
\i0 \
\
Concernant les cas ind\'e9finis, il semblerait que la moulinette ne les teste pas.\
src:\
https://forum.intra.42.fr/topics/622/messages/last (dernier message)\
+ slack #ft_printf recherche avec "undefined"\
\
Des tests en python:\
https://forum.intra.42.fr/topics/18453/messages/last}